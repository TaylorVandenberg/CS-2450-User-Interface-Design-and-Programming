// 
// Name:  Vandenberg, Taylor
// Project # 6
// Due:       12/3
// Course: cs-2450-01-f21 
// 
// Description: 
//  A notepad
// 

 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Highlighter;
import java.awt.*;
import java.awt.event.*;
import java.awt.print.PrinterException;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author macbook
 */
public class Notepad extends javax.swing.JFrame {
    /**
     * Creates new form myHw1
     */
    boolean wrapped;
    File openF;
    public Notepad() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiNew = new javax.swing.JMenuItem();
        jmiOpen = new javax.swing.JMenuItem();
        jmiSave = new javax.swing.JMenuItem();
        jmiSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiPageSetup = new javax.swing.JMenuItem();
        jmiPrint = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmiUndo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiCut = new javax.swing.JMenuItem();
        jmiCopy = new javax.swing.JMenuItem();
        jmiPaste = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiFind = new javax.swing.JMenuItem();
        jmiFindNext = new javax.swing.JMenuItem();
        jmiReplace = new javax.swing.JMenuItem();
        jmiGoTo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmiSlectAll = new javax.swing.JMenuItem();
        jmiTimeDate = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jmiWordWrap = new javax.swing.JMenuItem();
        jmiFont = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jmiStatusBar = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jmiViewHelp = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jmiAbout = new javax.swing.JMenuItem();
        wrapped = false;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Untitled - Notepad");
        setLocationRelativeTo(null);
        ImageIcon myIcon = new ImageIcon("Notepad.png");
        setIconImage(myIcon.getImage());
        setLocationRelativeTo(null);
        ImageIcon img = new ImageIcon("Notepad.png");
        setIconImage(img.getImage());
        

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier Normal", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        jmiNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiNew.setLabel("New");
        jmiNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNewActionPerformed(evt);
            }
        });
        jMenu1.add(jmiNew);

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiOpen.setLabel("Open...");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    openFileButton(evt);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });
        jMenu1.add(jmiOpen);

        jmiSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSave.setLabel("Save");
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(openF == null){
                    jmiPageSetupActionPerformed(evt);
                }
                else
                {
                    try (FileWriter writer = new FileWriter(openF)) 
                    {
                        writer.write(jTextArea1.getText());
                        setTitle(openF.getName() + " - Notepad");
                    } 
                    catch (IOException e) 
                    {
                        e.printStackTrace();
                    }
                }
            }
        });
        jMenu1.add(jmiSave);

        jmiSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSaveAs.setLabel("Save As...");
        jmiSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSaveAs);
        jMenu1.add(jSeparator1);

        jmiPageSetup.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiPageSetup.setLabel("Page Setup...");
        jmiPageSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPageSetupActionPerformed(evt);
            }
        });
        jMenu1.add(jmiPageSetup);
        jmiPageSetup.setEnabled(false);

        jmiPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiPrint.setLabel("Print...");
        jmiPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPrintActionPerformed(evt);
            }
        });
        jMenu1.add(jmiPrint);
        jMenu1.add(jSeparator2);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiExit.setLabel("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jMenu1.add(jmiExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('E');
        jMenu2.setText("Edit");

        jmiUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiUndo.setLabel("Undo");
        jmiUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jmiUndo);
        jmiUndo.setEnabled(false);
        jMenu2.add(jSeparator3);

        jmiCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiCut.setLabel("Cut");
        jmiCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCutActionPerformed(evt);
            }
        });
        jMenu2.add(jmiCut);

        jmiCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiCopy.setLabel("Copy");
        jmiCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCopyActionPerformed(evt);
            }
        });
        jMenu2.add(jmiCopy);

        jmiPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiPaste.setLabel("Paste");
        jmiPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jmiPaste);

        jmiDelete.setLabel("Delete");
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDeleteActionPerformed(evt);
            }
        });
        jMenu2.add(jmiDelete);
        jMenu2.add(jSeparator4);

        jmiFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiFind.setLabel("Find...");
        jmiFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDialog d = new JDialog();
                d.setSize(200, 110);
                d.setLayout(new BorderLayout());
                d.setModal(false);
                d.setLocationRelativeTo(null);
                JLabel label = new JLabel("Enter Text:");
                JTextField text = new JTextField();
                d.add(label, BorderLayout.NORTH);
                d.add(text, BorderLayout.CENTER);
                JButton goTo = new JButton("Find");
                goTo.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        String myWord = label.getText();
                        String text = jTextArea1.getText();
                        Highlighter highlighter = jTextArea1.getHighlighter();
                        if (text.contains(myWord)){
                            jTextArea1.selectAll();
                        }
                    }
                });
                JButton cancel = new JButton("Cancel");
                cancel.addActionListener(new ActionListener(){
                    public void actionPerformed(ActionEvent e){
                        d.setVisible(false);
                    }
                });
                JPanel f1 = new JPanel();
                f1.setLayout(new BorderLayout());
                f1.add(goTo, BorderLayout.EAST);
                f1.add(cancel, BorderLayout.WEST);
                d.add(f1, BorderLayout.SOUTH);
                d.setVisible(true);
            }
        });
        jMenu2.add(jmiFind);

        jmiFindNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiFindNext.setLabel("Find Next");
        jmiFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiFindNextActionPerformed(evt);
            }
        });
        jMenu2.add(jmiFindNext);
        jmiFindNext.setEnabled(false);

        jmiReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiReplace.setLabel("Replace");
        jmiReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiReplaceActionPerformed(evt);
            }
        });
        jMenu2.add(jmiReplace);
        jmiReplace.setEnabled(false);

        jmiGoTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiGoTo.setLabel("Go To...");
        jmiGoTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jmiGoToActionPerformed(evt);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (AWTException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });
        jMenu2.add(jmiGoTo);
        jMenu2.add(jSeparator5);

        jmiSlectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSlectAll.setLabel("Select All");
        jmiSlectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSlectAllActionPerformed(evt);
            }
        });
        jMenu2.add(jmiSlectAll);

        jmiTimeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiTimeDate.setLabel("Time/Date");
        jmiTimeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiTimeDateActionPerformed(evt);
            }
        });
        jMenu2.add(jmiTimeDate);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('O');
        jMenu3.setText("Format");

        jmiWordWrap.setLabel("Word Wrap");
        jmiWordWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (wrapped == true){
                    jTextArea1.setLineWrap(false);
                    wrapped = false;
                }
                else if (wrapped == false){
                    jTextArea1.setLineWrap(true);
                    wrapped=true;
                }
            }
        });
        jMenu3.add(jmiWordWrap);

        jmiFont.setLabel("Font...");
        jmiFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiFontActionPerformed(evt);
            }
        });
        jMenu3.add(jmiFont);

        jMenuBar1.add(jMenu3);

        jMenu4.setMnemonic('V');
        jMenu4.setText("View");

        jmiStatusBar.setLabel("Status Bar");
        jmiStatusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiStatusBarActionPerformed(evt);
            }
        });
        jMenu4.add(jmiStatusBar);
        jmiStatusBar.setEnabled(false);

        jMenuBar1.add(jMenu4);

        jMenu5.setMnemonic('H');
        jMenu5.setText("Help");

        jmiViewHelp.setLabel("View Help");
        jmiViewHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiViewHelpActionPerformed(evt);
            }
        });
        jMenu5.add(jmiViewHelp);
        jmiViewHelp.setEnabled(false);

        JMenuItem jmiExtraCredits = new JMenuItem();
        jMenu5.add(jmiExtraCredits);

        jmiExtraCredits.setLabel("Extra Credits...");
        jmiExtraCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JOptionPane.showMessageDialog(null, "print", "About", JOptionPane.INFORMATION_MESSAGE, img);
            }
        });
        jMenu5.add(jmiExtraCredits);

        jMenu5.add(jSeparator6);

        jmiAbout.setLabel("About Notepad");
        jmiAbout.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                JOptionPane.showMessageDialog(null, "Notepad V0.1\nby T.Vandenberg",
                                             "About", JOptionPane.INFORMATION_MESSAGE, myIcon);
            }
        });
        jMenu5.add(jmiAbout);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
        );

        pack();
        setVisible(true);
    }// </editor-fold>                        

    private void jmiNewActionPerformed(java.awt.event.ActionEvent evt) {                                       
        String data=jTextArea1.getText().trim();
        if(!data.equals("")) {
            int confirm = JOptionPane.showConfirmDialog(null, 
                    "Are you sure you want to create a new file?\n(Your current work will be lost.)"
                    , "New File Confirmation",
                    JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    jTextArea1.selectAll();
                    jTextArea1.replaceSelection("");
                }
        }
        else{
            jTextArea1.selectAll();
            jTextArea1.replaceSelection("");
            setTitle("Untitled - Notepad");
        }
    }                                      

    private void jmiUndoActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void jmiDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        jTextArea1.replaceSelection("");
    }                                         

    private void jmiFindActionPerformed(java.awt.event.ActionEvent evt) {                                        
        //TODO
    }                                       

    private void jmiFontActionPerformed(java.awt.event.ActionEvent evt) {                                        
        Font myFont = JFontChooser.showDialog(null, jTextArea1.getFont());
                if(myFont != null)
                    jTextArea1.setFont(myFont);
    }                                       

    private void openFileButton(java.awt.event.ActionEvent evt) throws IOException {                                
        JFileChooser fc = new JFileChooser();
        int returnValue = fc.showOpenDialog(null);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            openF = file;
            setTitle(openF.getName() + " - Notepad");
            BufferedReader in = new BufferedReader(new FileReader(file));
            String line = in.readLine();
            jTextArea1.selectAll();
            jTextArea1.replaceSelection("");
            while(line != null){
                jTextArea1.append(line + "\n");
                line = in.readLine();
            }
        }
    }                                                                      

    private void jmiSaveAsActionPerformed(java.awt.event.ActionEvent evt) {                                          
        FileNameExtensionFilter extensionFilter = new FileNameExtensionFilter("Text File", "txt");
        final JFileChooser saveAsFileChooser = new JFileChooser();
        saveAsFileChooser.setApproveButtonText("Save");
        saveAsFileChooser.setFileFilter(extensionFilter);
        int actionDialog = saveAsFileChooser.showOpenDialog(this);
        if (actionDialog != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File file = saveAsFileChooser.getSelectedFile();
        openF = file;
        setTitle(openF.getName() + " - Notepad");
        if (!file.getName().endsWith(".txt")) {
            file = new File(file.getAbsolutePath() + ".txt");
        }
        BufferedWriter outFile = null;
        try {
            outFile = new BufferedWriter(new FileWriter(file));
            jTextArea1.write(outFile);
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (outFile != null) {
                try {
                    outFile.close();
                } catch (IOException e) {}
            }
        }
    }                                         

    private void jmiPageSetupActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void jmiPrintActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
            jTextArea1.print();
        } catch (PrinterException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }                                        

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {  
        String data=jTextArea1.getText().trim();
        if(!data.equals("")) {                                 
            int confirm = JOptionPane.showConfirmDialog(null, 
                        "Are you sure you want to exit the program?", "Exit Program Message Box",
                        JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        System.exit(0);
                    }
        }
        else{
            System.exit(0);
        }
    }                                       

    private void jmiCutActionPerformed(java.awt.event.ActionEvent evt) {                                       
        jTextArea1.cut();
    }                                      

    private void jmiCopyActionPerformed(java.awt.event.ActionEvent evt) {                                        
        jTextArea1.copy();
    }                                       

    private void jmiPasteActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jTextArea1.paste();
    }                                        

    private void jmiFindNextActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jmiReplaceActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jmiGoToActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException, AWTException{   
        GoToDlg i = new GoToDlg();
        i.showDialog();
        jTextArea1.setCaretPosition(0);
        int j = 0;
        Robot r = new Robot();
        while (j < i.getValue()-1){
            r.keyPress(KeyEvent.VK_DOWN);
            j++;
        }
    }                                       

    private void jmiSlectAllActionPerformed(java.awt.event.ActionEvent evt) {                                            
        jTextArea1.selectAll();
    }                                           

    private void jmiTimeDateActionPerformed(java.awt.event.ActionEvent evt) {                                            
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        String date1 = formatter.format(date);
        jTextArea1.append(date1);
    }                                                                                    

    private void jmiStatusBarActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void jmiViewHelpActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }
    
    

                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notepad().setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem jmiAbout;
    private javax.swing.JMenuItem jmiCopy;
    private javax.swing.JMenuItem jmiCut;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiFind;
    private javax.swing.JMenuItem jmiFindNext;
    private javax.swing.JMenuItem jmiFont;
    private javax.swing.JMenuItem jmiGoTo;
    private javax.swing.JMenuItem jmiNew;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiPageSetup;
    private javax.swing.JMenuItem jmiPaste;
    private javax.swing.JMenuItem jmiPrint;
    private javax.swing.JMenuItem jmiReplace;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSaveAs;
    private javax.swing.JMenuItem jmiSlectAll;
    private javax.swing.JMenuItem jmiStatusBar;
    private javax.swing.JMenuItem jmiTimeDate;
    private javax.swing.JMenuItem jmiUndo;
    private javax.swing.JMenuItem jmiViewHelp;
    private javax.swing.JMenuItem jmiWordWrap;
    // End of variables declaration                   
}
